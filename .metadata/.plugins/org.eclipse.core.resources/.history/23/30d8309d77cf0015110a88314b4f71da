/*
 * Clock.cpp
 *
 *  Created on: Feb 9, 2016
 *      Author: bromley
 */

#include "Clock.h"

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <signal.h>

#include "board_info.h"
#include "clk.h"
#include "gpio.h"
#include "pwm.h"
#include "ws2811.h"

#define ARRAY_SIZE(stuff) (sizeof(stuff) / sizeof(stuff[0]))

#define TARGET_FREQ WS2811_TARGET_FREQ
#define GPIO_PIN 18
#define DMA 5

//#define WIDTH  1
#define HEIGHT 60
#define LED_COUNT HEIGHT

//typedef struct {
	//struct ws2811_device *device;                //< Private data for driver use
	//uint32_t freq;                               //< Required output frequency
	//int dmanum;                              //< DMA number _not_ already in use
	//ws2811_channel_t channel[RPI_PWM_CHANNELS];
//} ws2811_t;

   ws2811_t ledstring = { .freq = TARGET_FREQ, .dmanum = DMA, .channel =
   { [0] = { .gpionum = GPIO_PIN, .count = LED_COUNT, .invert = 0, .brightness = 255, },
	 [1] = { .gpionum = 0, .count = 0, .invert = 0, .brightness = 0, }, }, };

ws2811_led_t matrix[HEIGHT];

void matrix_render(void) {
	int x;
	int y;
	for (x = 0; x < 1; x++) {
		//for (y = 0; y < HEIGHT; y++) {
			ledstring.channel[0].leds[x] = matrix[x];
		}
	}
}

void matrix_raise(void) {
	int y;
	for (y = 0; y < (HEIGHT - 1); y++) {
			matrix[y] = matrix[y + 1];
		}
}

int dotspos[] = { 0, 1, 2, 3, 4, 5, 6, 7 };

ws2811_led_t dotcolors[] = {
		0x000010,
		0x100000,
		0x100000,
		0x100000,
		0x100000,
		0x100000,
		0x100000,
		0x001000,
		};


void matrix_bottom(void) {
	static int x = 0;
	//for (i = 0; i < WIDTH; i++) {
		matrix[HEIGHT - 1] = dotcolors[x & 7];
	//}
	x++;
}

static void ctrl_c_handler(int signum) {
	ws2811_fini(&ledstring);
}

static void setup_handlers(void) {
	struct sigaction sa = { .sa_handler = ctrl_c_handler, };
	sigaction(SIGKILL, &sa, NULL);
}

int main(int argc, char *argv[]) {
	int ret = 0;
	if (board_info_init() < 0) {
		return -1;
	}
	setup_handlers();
	if (ws2811_init(&ledstring)) {
		return -1;
	}
	while (1) {
		matrix_raise();
		matrix_bottom();
		matrix_render();
		if (ws2811_render(&ledstring)) {
			ret = -1;
			break;
		}
		// 15 frames /sec is sleepTime = 500000
		uint32_t sleepTime = 500000;
		usleep(sleepTime);
	}
	ws2811_fini(&ledstring);
	return ret;
}


/*
 * player.cpp
 *
 *  Created on: Feb 15, 2016
 *      Author: bromley
 */

#include "Player.h"
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <iostream>
#include <sstream>
#include <string>

using std::cout;
using std::endl;

const char Player::SoundCardPortName[] = "plughw:0,0";
unsigned char Player::riff[4] = { 'R', 'I', 'F', 'F' };
unsigned char Player::wave[4] = { 'W', 'A', 'V', 'E' };
unsigned char Player::fmt[4] = { 'f', 'm', 't', ' ' };
unsigned char Player::data[4] = { 'd', 'a', 't', 'a' };

Player::Player():playing(false),wavData(0), waveBits(16), waveChannels(1),
		waveRate(16000) {
}

Player::~Player() {
	delete[] wavData;
}

bool Player::isPlaying() {
	return playing;
}

int Player::compareId(const unsigned char * id, unsigned char * ptr) {
	unsigned char i = 4;
	while (i--) {
		if (*(id)++ != *(ptr)++)
			return 0;
	}
	return 1;
}

int Player::waveLoad(char* fileName) {
	FileHead head;
	int inHandle;
	inHandle = open(fileName, O_RDONLY);
	if (inHandle == -1) {
		cout << "Could not open " << fileName << endl;
		return 1;
	}
	int number = read(inHandle, &head, sizeof(FileHead));
	if (number != sizeof(FileHead)) {
		cout << "is a bad WAVE file" << endl;
		close(inHandle);
		return 1;
	}
	// Is it a RIFF and WAVE?
	unsigned char answer = compareId(riff, head.id)
			|| !compareId(wave, head.type);
	if (!answer) {
		cout << "is not a WAVE file" << endl;
		close(inHandle);
		return 1;
	}
	int size = read(inHandle, &head, sizeof(ChunkHead));
	// =========== Is it a fmt chunk? =======================
	if (!compareId(fmt, head.id)) {
		cout << "Bad fmt chunk" << endl;
		close(inHandle);
		return 1;
	}
	WavFormat format;
	// Read in the remainder of chunk
	size = read(inHandle, &format.formatTag, sizeof(WavFormat));
	if (size != sizeof(WavFormat)) {
		cout << "Bad WavFormat chunk" << endl;
		close(inHandle);
		return 1;
	}
	// Can't handle compressed WAVE files
	if (format.formatTag != 1) {
		cout << "compressed WAVE not supported" << endl;
		close(inHandle);
		return 1;
	}
	waveBits = (unsigned char) format.bitsPerSample;
	waveRate = (unsigned short) format.samplesPerSec;
	waveChannels = format.channels;
	// ============ next is a data chunk? ======================
	size = read(inHandle, &head, sizeof(ChunkHead));
	if (!compareId(data, head.id)) {
		cout << "Not a data chunk" << endl;
		close(inHandle);
		return 1;
	}
	// Size of wave data, in bytes,  is head.Length.
	if (wavData != 0) {
		delete[] wavData;
		wavData = 0;
	}
	wavData = new unsigned char[head.length];
	size = read(inHandle, wavData, head.length);
	if (size != head.length) {
		delete[] wavData;
		wavData = 0;
		close(inHandle);
		return 1;
	}
	// Store size (in frames)
	waveSize = (head.length * 8)
			/ ((unsigned int) waveBits * (unsigned int) waveChannels);
	close(inHandle);
	return 0;
}

void Player::playAudio() {
	unsigned int count = 0;
	unsigned int frames;
	playing = true;
	// Output the wave data
	do {
		frames = snd_pcm_writei(playbackHandle, wavData + count,
				waveSize - count);
		// If an error, try to recover from it
		if (frames < 0)
			frames = snd_pcm_recover(playbackHandle, frames, 0);
		if (frames < 0) {
			printf("Error playing wave: %s\n", snd_strerror(frames));
			break;
		}
		count += frames;
	} while (count < waveSize);
	// Wait for playback to completely finish
	if (count == waveSize)
		snd_pcm_drain(playbackHandle);
	playing = false;
}

void Player::play(vector<unsigned char>* data) {
	waveSize = data->size();
	wavData = data->data();
	playAudio();
	waveSize = 0;
	delete[] wavData;
	wavData = 0;
}

void Player::copyData(vector<unsigned char>* data) {
	data->resize(waveSize);
	unsigned char* temp = data->data();
	for (int i = 0; i < waveSize; i++)
		temp[i] = wavData[i];
}

void Player::freeWaveData() {
	delete[] wavData;
	wavData = 0;
	waveSize = 0;
}

int Player::getPcmFormat(unsigned char nBits) {
	if (nBits == 8)
		return SND_PCM_FORMAT_U8;
	if (nBits == 16)
		return SND_PCM_FORMAT_S16;
	if (nBits == 24)
		return SND_PCM_FORMAT_S24;
	if (nBits == 32)
		return SND_PCM_FORMAT_S32;
	return -1;
}
void Player::closeAudioDevice() {
	//snd_pcm_close(playbackHandle);
}

int Player::openAudioDevice() {
	int err;
	// Open audio device we wish to use for playback
	// If I leave it open, it does not skip the beginning of files
	// but eventually gives error -16, "Device or Resource busy"
	// In this case, everything still works so ignore this error.
	err = snd_pcm_open(&playbackHandle, &SoundCardPortName[0],
			SND_PCM_STREAM_PLAYBACK, 0);
	if ((err < 0) && (err != -16)) {
		cout << "Can't open audio " << SoundCardPortName << " "
				<< snd_strerror(err) << err << endl;
		//return 1;
	}
	err = getPcmFormat(waveBits);
	printf("Sound format = %d channels = %d rate = %d\n", err, waveChannels,
			waveRate);
	err = snd_pcm_set_params(playbackHandle, (snd_pcm_format_t) err,
			SND_PCM_ACCESS_RW_INTERLEAVED, waveChannels, waveRate, 1, 500000);
	if (err < 0) {
		cout << "Can't set sound parameters " << snd_strerror(err) << endl;
		return 1;
	}
	return 0;
}
void Player::play() {
	waveLoad((char*)filePath.c_str());
	openAudioDevice();
	playAudio();
	closeAudioDevice();
}
void Player::setFilePath(string path) {
	filePath = path;
}
/**
 * Volume setting is NON-LINEAR.  70% is very soft.
 */
void Player::setVolume(int percent) {
	std::stringstream stream;
	stream << "amixer sset 'PCM' " << percent << "%\n";
	cout << stream.str();
	system(stream.str().c_str());
}

int mainG(int argc, char **argv) {
	Player* player = new Player;
	if (argc < 2) {
		printf("You must supply the name of a 16-bit mono WAVE file to play\n");
		return 0;
	}
	player->setVolume(80);
	int answer = player->waveLoad(argv[1]);
	if (answer) {
		player->freeWaveData();
		return (0);
	}
	player->openAudioDevice();
	player->playAudio();
	player->closeAudioDevice();

	return (0);
}
